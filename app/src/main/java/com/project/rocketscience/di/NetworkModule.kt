package com.project.rocketscience.di

import com.project.rocketscience.data.remote.api.SpaceXApi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton


/**
 * Hilt Module for providing network-related dependencies, primarily for Retrofit.
 *
 * It configures:
 * 1. An [HttpLoggingInterceptor] for logging HTTP request and response details.
 * 2. An [OkHttpClient] with the logging interceptor and custom timeouts.
 * 3. A[Retrofit] instance configured with a base URL, the custom [OkHttpClient],
 *    and a [GsonConverterFactory] for JSON serialization/deserialization.
 * 4. The [SpaceXApi] service interface implementation generated by Retrofit.
 */
@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {
    /**
     * The base URL for the SpaceX API.
     */
    private const val BASE_URL = "https://api.spacexdata.com/v3/"

    /**
     * Provides a singleton [HttpLoggingInterceptor] instance.
     *
     * This interceptor is configured to log the entire body of HTTP requests and responses.
     * @return A configured [HttpLoggingInterceptor] instance.
     */
    @Provides
    @Singleton
    fun provideLoggingInterceptor(): HttpLoggingInterceptor {
        return HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }
    }

    /**
     * Provides a singleton [OkHttpClient] instance.
     *
     * @param loggingInterceptor The [HttpLoggingInterceptor] to be added to the client.
     * @return A configured [OkHttpClient] instance.
     */
    @Provides
    @Singleton
    fun provideOkHttpClient(
        loggingInterceptor: HttpLoggingInterceptor
    ): OkHttpClient {
        return OkHttpClient.Builder()
            .addInterceptor(loggingInterceptor)
            .connectTimeout(60, TimeUnit.SECONDS)
            .writeTimeout(60, TimeUnit.SECONDS)
            .readTimeout(60, TimeUnit.SECONDS)
            .build()
    }

    /**
     * Provides a singleton [Retrofit] instance.
     *
     * This Retrofit instance is configured with:
     *  - The [BASE_URL] for the SpaceX API.
     *  - The custom [OkHttpClient] provided by [provideOkHttpClient].
     *  - [GsonConverterFactory] for converting JSON responses to Kotlin objects.
     *
     * @param okHttpClient The [OkHttpClient] to be used by Retrofit for making requests.
     * @return A configured [Retrofit] instance.
     */
    @Provides
    @Singleton
    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    /*** Provides a singleton instance of the [SpaceXApi] service interface.
     *
     * Retrofit generates the implementation for this interface based on its annotations.
     *
     * @param retrofit The configured [Retrofit] instance.
     * @return An implementation of the [SpaceXApi] interface.
     */
    @Provides
    @Singleton
    fun provideSpaceXApi(retrofit: Retrofit): SpaceXApi {
        return retrofit.create(SpaceXApi::class.java)
    }
}
